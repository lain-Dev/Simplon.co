Linter, minifier, bundler, transpiler
Qu'est-ce que c'est que ces mots barbares ?!   ü§î

Ces mots "barbares" venus de l'anglais nous seront en fait tr√®s utiles ! Voyons ensemble ce que repr√©sente chacun d'entre eux.

Linter
Le linter est un programme qui va analyser notre code et d√©tecter les erreurs de syntaxe, les variables non utilis√©es, les variables qui n'existent pas, la mauvaise organisation du code, le non-respect des bonnes pratiques d'√©criture de code...

Le JavaScript √©tant un langage non compil√©, vous ne verrez les erreurs de syntaxe de votre code que lors de l'ex√©cution du code concern√©. C'est-√†-dire que si une de vos fonctions utilise une variable qui n'est pas d√©finie, vous ne le saurez que lorsque votre fonction sera ex√©cut√©e. Autant dire que pour certaines fonctions peu utilis√©es, vous pouvez tr√®s facilement laisser des erreurs "d'inattention" passer en production. üò´

Un linter pourra donc vous aider √† r√©gler ces erreurs avant que vos utilisateurs n'en subissent les cons√©quences (les tests sont aussi un tr√®s bon moyen compl√©mentaire au linter pour √©viter les erreurs, mais ce n'est pas l'objet de ce cours). Il pourra aussi vous aider √† optimiser un peu votre code et vous sera d'une grande aide pour d√©finir des bonnes pratiques d'√©criture de code lorsque vous travaillerez en √©quipe !

Voici quelques exemples de linters : JSLint, ESLint.

Minifier
Comme vous le savez, votre code JavaScript est charg√© par votre navigateur. Cela signifie que votre navigateur va demander √† votre serveur votre code JavaScript afin de l'ex√©cuter. Il est alors √©vident que moins votre code sera lourd (en termes de taille de fichier), plus votre navigateur pourra le r√©cup√©rer et le charger rapidement.

Un minifier est donc un programme responsable de la minification de votre code. C'est-√†-dire qu'il va essayer de rendre votre code le plus l√©ger possible en retirant les espaces et retours √† la ligne inutiles, en renommant vos variables avec des noms plus courts, en supprimant le code non utilis√©, en supprimant les commentaires, en optimisant certains bouts de code pour les r√©√©crire avec une syntaxe plus l√©g√®re, etc.

Malgr√© les bonnes connexions Internet qui se d√©veloppent de plus en plus, la minification du code n'est pas quelque chose √† n√©gliger, car si vous avez un site web avec beaucoup de trafic, c'est autant de requ√™tes qui sont faites pour r√©cup√©rer votre code. Chaque octet compte afin d'all√©ger la charge des serveurs et de donner √† vos utilisateurs une r√©ponse la plus rapide possible !

Voici quelques exemples de minifiers : node-minify, UglifyJS.

Bundler
De la m√™me mani√®re qu'il est important d'avoir un code le plus l√©ger possible, il est aussi important de r√©duire au maximum le nombre de fichiers qui composent votre code !

C'est donc le r√¥le du bundler. Il va se charger de packager votre code pour qu'il tienne dans un seul fichier.

Voici un exemple de bundler : Webpack.

Transpiler
Vous devez vous en douter, le langage JavaScript √©volue. √Ä l'heure actuelle, nous en sommes √† la version ECMAScript 2018  (ES9), mais d√©j√† la version ECMAScript 2015 (ES6) n'est plus support√©e dans son int√©gralit√© tous les navigateurs. Et c'est bien dommage, car les nouvelles versions peuvent offrir des choses int√©ressantes ( async  /  await  par exemple).

Mais alors comment coder avec la derni√®re version de JavaScript tout en √©tant compatible avec tous les navigateurs ? Avec un transpiler !

Voici un exemple de transpiler : Babel.

En r√©sum√©
Dans ce chapitre, vous avez appris :

Ce qu'est un linter et √† quoi √ßa sert ;

Ce qu'est un minifier et √† quoi √ßa sert ;

Ce qu'est un bundler et √† quoi √ßa sert ;

Ce qu'est un transpiler et √† quoi √ßa sert